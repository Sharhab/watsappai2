app.post('/webhook', async (req, res) => {

  const from = req.body?.From;

  const numMedia = Number.parseInt(req.body?.NumMedia || '0', 10) || 0;

  let incomingMsg = req.body?.Body || '';

  const adHeadline = req.body?.ReferralHeadline || null;



  console.log('------------------------------------------------------------');

  console.log('üì© Incoming from:', from);

  console.log('üì¶ NumMedia:', numMedia, 'Body:', incomingMsg);



  // If voice note

  if (numMedia > 0 && (req.body?.MediaContentType0 || '').includes('audio')) {

    const mediaUrl = req.body.MediaUrl0;

    const transcript = await transcribeAudio(mediaUrl);

    if (transcript) {

      incomingMsg = transcript;

    } else {

      console.warn('‚ö†Ô∏è Transcription returned null/empty; keeping text Body if any.');

    }

  }



  // Load / create session

  let session = await CustomerSession.findOne({ phoneNumber: from });

  if (!session) {

    session = new CustomerSession({

      phoneNumber: from,

      adSource: { headline: adHeadline },

      hasReceivedWelcome: false,

      conversationHistory: [],

      currentSteps: [],

      messageHistory: [],

      lastInteractedAt: new Date(),

    });

    console.log('üÜï New session created for', from);

  }



  if (!Array.isArray(session.conversationHistory)) session.conversationHistory = [];



  session.conversationHistory.push({

    sender: 'user',

    messageType: numMedia > 0 ? 'audio' : 'text',

    content: incomingMsg,

    timestamp: new Date(),

  });



  session.lastInteractedAt = new Date();

  await session.save();



  // Match QA

  const matchedQA = incomingMsg ? await findBestMatch(incomingMsg) : null;

  console.log('üéØ Matched QA:', matchedQA ? matchedQA.question : '‚ùå none');



  try {

    // First-time: send intro sequence once

    if (!session.hasReceivedWelcome) {

      console.log('üëã Sending intro sequence...');



      // Fetch from DB

      const introDoc = await Intro.findOne();

      const introSequence = introDoc?.sequence || [];



      for (const step of introSequence) {

        if (!step) continue;



        if (step.type === 'text') {

          await client.messages.create({

            from: 'whatsapp:+14155238886',

            to: from,

            body: step.content || '',

          });

        } else if (step.type === 'video' || step.type === 'audio') {

          // ‚úÖ use fileUrl (full public URL), not content

          if (!step.fileUrl) continue;

          await client.messages.create({

            from: 'whatsapp:+14155238886',

            to: from,

            mediaUrl: [step.fileUrl],

          });

        }

      }



      session.hasReceivedWelcome = true;

      await session.save();

      console.log('‚úÖ Intro sequence sent from DB and session updated.');

    } else if (matchedQA) {

      // ‚úÖ Always answer, but for now we only send TEXT

      if (matchedQA.answerText) {

        console.log('üí¨ Sending text answer:', matchedQA.answerText);

        await client.messages.create({

          from: 'whatsapp:+14155238886',

          to: from,

          body: matchedQA.answerText,

        });

      } else {

        console.log('‚ö†Ô∏è Matched QA has no text answer. Sending fallback.');

        await client.messages.create({

          from: 'whatsapp:+14155238886',

          to: from,

          body: 'Mun gano tambayar ka, amma ba mu da amsa a rubuce yanzu.',

        });

      }



      if (matchedQA.answerAudio) {

        console.log('üì§ Sending audio answer:', matchedQA.answerAudio);

        await client.messages.create({

          from: 'whatsapp:+14155238886',

          to: from,

          mediaUrl: [matchedQA.answerAudio],

        });

      } else if (matchedQA.answerVideo) {

        console.log('üì§ Sending video answer:', matchedQA.answerVideo);

        await client.messages.create({

          from: 'whatsapp:+14155238886',

          to: from,

          mediaUrl: [matchedQA.answerVideo],

        });

      }

    } else {

      console.log('üõü No match; sending fallback.');

      await client.messages.create({

        from: 'whatsapp:+14155238886',

        to: from,

        body:

          'Ba mu gane tambayarka ba sosai. Idan kana so, aiko da sautin murya ko ka sake rubutu da cikakken bayani.',

      });

    }

  } catch (error) {

    console.error('‚ùå Twilio send error:', error?.message || error);

  }



  res.status(200).end();

});
